---
title: "Untitled"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r cars}
summary(cars)
```

## Including Plots

You can also embed plots, for example:

```{r pressure, echo=FALSE}
plot(pressure)
```

Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
MODULE 4
Matrices: matrix()
  m <-matrix(data=c(1,2,3,4),nrow=2,ncol=2)
  
creates a matrix that's read down then right:
  m <- matrix(data=c(1,2,3,4,5,6),nrow=2,ncol=3,byrow=FALSE)
  
creates a matrix that's read right then down:
  m <- matrix(data=c(1,2,3,4,5,6),nrow=2,ncol=3,byrow=TRUE)
  
another way to create matrices (right then down): 
  v1 <- c(1,2,3,4)
  v2 <- c(6,7,8,9)
  m1 <- rbind(v1,v2)
  down then right:
  m2 <- cbind(v1,v2)
  
Metadata about matrices: class(), dim(), names(), rownames(), colnames()
  dim(): "returns a vector containing the      number of rows at index position 1 and       number of columns at index position 2"
  
The structure {str()} command can be applied   to any data structure to provide details     about that object. This is incredibly        useful!

Array: more general data structure, of which   a vector (with 1 implicit dimension) and a   matrix (with 2 defined dimensions) are but   examples; arrays can include additional      dimensions, but (like vectors and matrices)   the can only include elements that all of    the same atomic data class (eg numeric,      characters).
Construction of a 3-dimensional array with 5   rows, 6 columns, and 3 "levels":
  a <- array(data=1:90, dim=c(5,6,3))

Subsetting: elements from vectors, matrices,   and arrays can be selected by subsetting     them using their index position(s) in        bracket notation. 
For vectors, you would specify an index        value in one dimension. For example:
  v <- 1:100
  Select the first 15 elements: v[1:15]
  Give a vector of index values to use to      subset: v[c(2,4,6,8,10)]
  Use a function or a calculation to subset a   vector: v <- 101:200
  v[seq(from = 1, to = 100, by = 2)]
For matrices, you would give the index         values in two dimensions.
For arrays generally, you would give index     values for each dimension in the array.

stringr:
https://stringr.tidyverse.org/
  x <- c("why", "video", "cross", "extra",     "deal", "authority")
  str_length(x)
  > [1] 3 5 5 5 4 9
  